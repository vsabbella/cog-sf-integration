/**
 * Created by venkatasabbella on 1/27/24.
 */

@isTest(SeeAllData=false)
private with sharing class CognisureAPIConsumerCtrlTest {

    private static testMethod void permissonsTest() {
        User u = [Select Id from User where Id = :UserInfo.getUserId()];
        System.assert(u != null, 'user not found.');

        Test.startTest();
        System.runAs(u) {
            String SObjectTypeStr = 'Case';
            Schema.DescribeSObjectResult[] descResult_Case = Schema.describeSObjects(new List<String>{
                    SObjectTypeStr
            });
            Schema.DescribeSObjectResult descRes = descResult_Case[0].getSObjectType().getDescribe();
            if (descResult_Case[0].isAccessible() && descResult_Case[0].isQueryable()) {

            } else {
                System.assert(false, 'Case field on Submission object is not accessible. Check Permissions.');
            }
        }
        Test.stopTest();

    }

    private static testMethod void TestUploadPIRequests() {
        User u = [Select Id from User where Id = :UserInfo.getUserId()];
        System.assert(u != null, 'user not found.');

        Test.startTest();
        System.runAs(u) {
            Sobject s = Cognisureapi__mdt.getInstance('api_details');
            System.assert(s != null, 'cognisureapimetadata is not found.');
            Case case0 = [select Id from case order by createdDate desc limit 1];
            CognisureAPIConsumerCtrl c = new CognisureAPIConsumerCtrl();
            c.makeUploadRequestdo(case0.Id);
        }
        Test.stopTest();

    }

    private static testMethod void testCSFileUPloadBatch() {


        Id jobId ;
        User u = [Select Id from User where Id = :UserInfo.getUserId()];
        System.assert(u != null, 'user not found.');

        Test.startTest();
        System.runAs(u) {
            CSFileUploadAPIConsumerBatch c = new CSFileUploadAPIConsumerBatch();
            jobId = Database.executeBatch(c, 1);
        }
        Test.stopTest();

        AsyncApexJob a = [Select Id, Status, ExtendedStatus, NumberOfErrors from AsyncApexJob where Id = :jobId];
        System.debug(LoggingLevel.DEBUG, 'AsyncApexJob' + a);
        Submission__c sub = [Select Id, name, Message_Id__c, Common_JSON_Status__c, Custom_JSON_Status__c, Submission_360_Status__c from Submission__c limit 1];
        system.assert(sub != null, 'Submission is null');
        //system.assert(sub.Message_Id__c!=null, 'Submission is null');
    }

    private static testMethod void testCSSubmissionBatch() {
        User u = [Select Id from User where Id = :UserInfo.getUserId()];
        System.assert(u != null, 'user not found.');

        List<Claim> claims = [Select Id, name from Claim];
        system.assert(claims.size() == 0, 'Claims should not exist');
        Id jobId ;
        String respId = getMessageIdfromCSResponse();
        Submission__c s = [Select Id, name, Message_Id__c, Common_JSON_Status__c, processed_commonjson__c from Submission__c limit 1];
        s.Message_Id__c = respId;
        s.Common_JSON_Status__c = true;
        s.processed_commonjson__c = false;
        Update s;

        Test.startTest();
        System.runAs(u) {
            try {
                cssubmissionbatch c = new cssubmissionbatch();
                //jobId = Database.executeBatch(c, 1);
            } catch (Exception ex) {

            }

        }
        Test.stopTest();


        /*AsyncApexJob a = [Select Id, Status, ExtendedStatus, NumberOfErrors from AsyncApexJob where Id = :jobId];
        System.assert(a.Status == 'Completed', 'AsyncApexJob' + a);
        System.assert(a.NumberOfErrors == 0, 'AsyncApexJob' + a);
        Submission__c sub = [Select Id, name, Message_Id__c, Common_JSON_Status__c, Custom_JSON_Status__c, Submission_360_Status__c from Submission__c limit 1];
        system.assert(sub != null, 'Submission is null');
        system.assert(sub.Message_Id__c != null, 'Submission is null');

        claims = [Select Id, name from Claim];
        system.assert(claims.size() > 0, 'Claims are not generated');
        system.debug(LoggingLevel.DEBUG, '' + claims);*/

    }

    private static void uploadFilesAPITest() {

        Id caseId = '500DS00000FUYyuYAH';
        String ctoken2 = 'VKNRwDT8MMWOsdb1gTZRWQPn1YFxxs2SlELG_BT8il3G1q4-4C3a6xQDb3lR2awu3KqhG6XMOPiWEoSuzXo8ldJJySnjxVgPP-djywmn_J7TbDzuXiW1oY_qnwWTIZfj07TtI-DWszip934wVjywHzI92Wh2YM2r8jzcUOBWtDJBlytK9wfjJjxAnX6eb9_2LMHxouM4zyGWFAE5-VaYrR1cH6-g0Y82pOEmt5JdZOxDTlaHhSGGcVnWyyxB-Vur';
        Cognisureapi__mdt cognisureapimetadata = Cognisureapi__mdt.getInstance('api_details');
        String baseURL = (String) cognisureapimetadata.get('Base_URL__c');
        //String contentPlugin = (String) cognisureapimetadata.get('File_Content_Plugin__c');
        //String fileQueryClass = string.isBlank(contentPlugin) ? 'CognisureAPI.AttachmentQuery' : contentPlugin;
        //CognisureAPI.IFileContentQueryHander fileQueryHandler = (CognisureAPI.IFileContentQueryHander) Type.forName(fileQueryClass).newInstance();
        //String fileQueryString = fileQueryHandler.getFileContentQuery(caseId);
        //String form64='';
        //form64 += CognisureAPI_Util.getBase64String(caseId, fileQueryString);
        String form64Str = '';

        string contentType = vNHttpFormBuilder.GetContentType();

        blob formBlob = EncodingUtil.base64Decode(form64Str);
        string contentLength = string.valueOf(formBlob.size());

        //  Compose the http request
        HttpRequest httpRequest = new HttpRequest();

        httpRequest.setHeader('Authorization', 'Bearer ' + ctoken2);

        //httpRequest.setBody(emailbodyjson);
        String uploadAPIUrlformatted = String.format((String) cognisureapimetadata.get('Upload_API_Endpoint__c'), new List<String>{
                '', caseId, caseId
        });
        //string namedCredendpoint = 'callout:'+this.NamedCredentail+uploadAPIUrlStr;
        //string namedCredendpoint_2 = 'callout:csfileupload'+uploadAPIUrlStr;
        //System.debug(LoggingLevel.DEBUG,namedCredendpoint);
        String endpoint = baseurl + uploadAPIUrlformatted;
        httpRequest.setEndpoint(endpoint);
        httpRequest.setBodyAsBlob(formBlob);
        httpRequest.setHeader('Connection', 'keep-alive');
        httpRequest.setHeader('Content-Length', contentLength);
        httpRequest.setHeader('Content-Type', contentType);
        httpRequest.setMethod('POST');
        httpRequest.setTimeout(120000);

        if (test.isRunningTest())
            Test.setMock(HttpCalloutMock.class, new CognisureFileUploadMockImpl());

        Http http = new Http();
        HTTPResponse res = http.send(httpRequest);

        string responseStatusCode = String.valueof(res.getStatusCode());
        string responseBody = String.valueof(res.getbody());

        //Expected response
        //"{\"id\":null,\"returnCode\":false,\"message\":\"Please upload valid files\",\"fileUploadResults\":[]}"

    }

    private static String getBase64String() {
        return '';
    }

    private static testMethod void TestCommonJSONResponse() {
        User u = [Select Id from User where Id = :UserInfo.getUserId()];
        System.assert(u != null, 'user not found.');

        Test.startTest();
        System.runAs(u) {
            Sobject s = Cognisureapi__mdt.getInstance('api_details');
            System.assert(s != null, 'cognisureapimetadata is not found.');
            Case case0 = [select Id from case limit 1];
            CognisureAPIConsumerCtrl c = new CognisureAPIConsumerCtrl();
            c.getCommonJSONforSubmission(case0.Id);
        }
        Test.stopTest();


    }

    private static testMethod void TestCommonJSONResponse2() {
        User u = [Select Id from User where Id = :UserInfo.getUserId()];
        System.assert(u != null, 'user not found.');

        Test.startTest();
        System.runAs(u) {
            Sobject s = Cognisureapi__mdt.getInstance('api_details');
            System.assert(s != null, 'cognisureapimetadata is not found.');
            for (Case case0 : [select Id from case where createdDate = Today limit 1]) {
                CognisureAPIConsumerCtrl c = new CognisureAPIConsumerCtrl();
                c.getCommonJSONforSubmission(case0.Id);

            }
        }
        Test.stopTest();
    }

    private static testMethod void TestScheduler() {
        User u = [Select Id from User where Id = :UserInfo.getUserId()];
        System.assert(u != null, 'user not found.');

        Test.startTest();
        System.runAs(u) {
            CognisureAPIConsumerScheduler schInstance = new CognisureAPIConsumerScheduler();
            String sch = '0 48 * * * ?';
            System.schedule('Scheduler of API batches', sch, schInstance);
        }
        Test.stopTest();


    }

    private static testMethod void test_ProcessJSONResponseFromStaticResource() {

        User u = [Select Id from User where Id = :UserInfo.getUserId()];
        System.assert(u != null, 'user not found.');

        Test.startTest();
        System.runAs(u) {
            try {
                CognisureAPIRequestsTest.test_ProcessJSONResponseFromStaticResource();
            } catch (Exception Ex) {

            }
        }
        Test.stopTest();
    }

    private static testMethod void testJsonResponse_passwith1RecordEach() {

        User u = [Select Id from User where Id = :UserInfo.getUserId()];
        System.assert(u != null, 'user not found.');

        Test.startTest();
        System.runAs(u) {
            String jsonResponse = CommonJSONResponseTestData.getCommonjsonAPIResp_passwith1recordeach();
            List<Submission__c> submisstionList = [Select Id, name, case__c from Submission__c limit 1];
            System.assert(submisstionList.size() > 0, 'Submission Record Does not Exist');
            String SubmisisonId = submisstionList[0].Id;
            System.assert(submisstionList[0].case__c != null, 'Submission case Does not Exist');

            List<StaticResource> sr = [Select id, name, body from StaticResource where Name = 'submissionrespunformatted'];
            System.assert(sr.size() > 0, 'Static Resource is not available');
            String submissionResponseJson = EncodingUtil.base64Decode(EncodingUtil.base64Encode(sr[0].body)).toString();
            System.assert(!String.isBlank(submissionResponseJson), 'JSON Response is blank');

            try {
                ProcessSubmissionResponse.processJSONResponse(jsonResponse, SubmisisonId);
            } catch (Exception Ex) {
                System.debug(LoggingLevel.ERROR, ex.getMessage() + ex.getCause());
                System.assert(false, 'Error:' + Ex.getCause() + Ex.getMessage());
            }

        }
        Test.stopTest();

        List<Account> AcctList = [Select Id, name, RecordTypeId from Account where createdDate = Today];
        System.assert(AcctList.size() == 1, 'Account Not created');
        System.Debug(LoggingLevel.DEBUG, 'Accounts:' + JSON.serialize(AcctList));


        List<Claim> Claims = [Select Id, Name, AccountId, IsDrivable, Status from Claim where createdDate = Today];
        System.assert(Claims.size() == 1, 'Claims Not created');
        System.Debug(LoggingLevel.DEBUG, 'Claims:' + JSON.serialize(Claims));

        List<CustomerProperty> CustomerProperties = [
                Select Id, PrimaryOwnerId, FloorType, FoundationType, GarageType,
                        LotArea, CeilingType, DwellingType, PurchasePrice, RoofType, BedroomCount, BuiltUpArea, EngineDisplacementVolume, FairMarketValue, FloorCount, IsBasementIncluded,
                        IsChimneyIncluded, IsPassedSmogCheck, IsSwimmingPoolIncluded, PurchaseDate, YearBuilt
                from CustomerProperty
                where createdDate = Today
        ];
        System.assert(CustomerProperties.size() == 1, 'CustomerProperties Not created');
        System.Debug(LoggingLevel.DEBUG, 'CustomerProperties:' + JSON.serialize(CustomerProperties));


        List<CoverageType> CoverageTypes = [
                Select Id, Category, CategoryGroup, CategoryGroupType, CategoryGroupTypeValue, DeductibleAmount, EffectiveDate, ExpirationDate, LimitAmount, LimitRange, Name, SourceSystemIdentifier
                from CoverageType
                where createdDate = Today
        ];
        System.assert(CoverageTypes.size() > 0, 'CoverageTypes Not created');
        System.Debug(LoggingLevel.DEBUG, 'CoverageTypes:' + JSON.serialize(CoverageTypes));

        List<InsurancePolicy> InsurancePolicies = [
                Select Id, Name
                from InsurancePolicy
                where createdDate = Today
        ];
        //System.assert(InsurancePolicies.size()>0, 'InsurancePolicies Not created');
        System.Debug(LoggingLevel.DEBUG, 'InsurancePolicies:' + JSON.serialize(InsurancePolicies));


    }

    private static testMethod void testJsonResponse_2Accounts_2Claims() {

        User u = [Select Id from User where Id = :UserInfo.getUserId()];
        String jsonResponse = CommonJSONResponseTestData.getCommonjsonAPIResp_MulitpleRecords();
        System.assert(u != null, 'user not found.');

        Test.startTest();
        System.runAs(u) {
            List<Submission__c> submisstionList = [Select Id, name, case__c from Submission__c limit 1];
            System.assert(submisstionList.size() > 0, 'Submission Record Does not Exist');
            String SubmisisonId = submisstionList[0].Id;
            System.assert(submisstionList[0].case__c != null, 'Submission case Does not Exist');
            List<StaticResource> sr = [Select id, name, body from StaticResource where Name = 'submissionrespunformatted'];
            System.assert(sr.size() > 0, 'Static Resource is not available');
            String submissionResponseJson = EncodingUtil.base64Decode(EncodingUtil.base64Encode(sr[0].body)).toString();
            System.assert(!String.isBlank(submissionResponseJson), 'JSON Response is blank');

            try {
                ProcessSubmissionResponse.processJSONResponse(jsonResponse, SubmisisonId);
            } catch (Exception Ex) {
                System.debug(LoggingLevel.ERROR, ex.getMessage() + ex.getCause());
                System.assert(false, 'Error:' + Ex.getCause() + Ex.getMessage());
            }
            List<Account> AcctList = [Select Id, name, RecordTypeId from Account where createdDate = Today];
            System.assert(AcctList.size() == 1, 'Account Not created');
            System.Debug(LoggingLevel.DEBUG, 'Accounts:' + JSON.serialize(AcctList));


            List<Claim> Claims = [Select Id, Name, AccountId, IsDrivable, Status, Cause_Of_Loss__c from Claim where createdDate = Today];
            System.assert(Claims.size() == 2, 'Claims Not created');
            System.Debug(LoggingLevel.DEBUG, 'Claims:' + JSON.serialize(Claims));
            Set<String> strCauseOfLossSet = new Set<String>{
                    'PROPERTYDAMAGE', 'THEFT'
            };
            strCauseOfLossSet.contains(Claims[0].Cause_Of_Loss__c);
            strCauseOfLossSet.contains(Claims[1].Cause_Of_Loss__c);


            List<CustomerProperty> CustomerProperties = [
                    Select Id, PrimaryOwnerId, FloorType, FoundationType, GarageType,
                            LotArea, CeilingType, DwellingType, PurchasePrice, RoofType, BedroomCount, BuiltUpArea, EngineDisplacementVolume, FairMarketValue, FloorCount, IsBasementIncluded,
                            IsChimneyIncluded, IsPassedSmogCheck, IsSwimmingPoolIncluded, PurchaseDate, YearBuilt
                    from CustomerProperty
                    where createdDate = Today
            ];
            System.assert(CustomerProperties.size() == 1, 'CustomerProperties Not created');
            System.Debug(LoggingLevel.DEBUG, 'CustomerProperties:' + JSON.serialize(CustomerProperties));


            List<CoverageType> CoverageTypes = [
                    Select Id, Category, CategoryGroup, CategoryGroupType, CategoryGroupTypeValue, DeductibleAmount, EffectiveDate, ExpirationDate, LimitAmount, LimitRange, Name, SourceSystemIdentifier
                    from CoverageType
                    where createdDate = Today
            ];
            System.assert(CoverageTypes.size() > 0, 'CoverageTypes Not created');
            System.Debug(LoggingLevel.DEBUG, 'CoverageTypes:' + JSON.serialize(CoverageTypes));

            List<InsurancePolicy> InsurancePolicies = [
                    Select Id, Name
                    from InsurancePolicy
                    where createdDate = Today
            ];
            //System.assert(InsurancePolicies.size()>0, 'InsurancePolicies Not created');
            System.Debug(LoggingLevel.DEBUG, 'InsurancePolicies:' + JSON.serialize(InsurancePolicies));
        }
        Test.stopTest();


    }

    private static testMethod void Test_EmptyclaimName_EmptyAccountName() {
        String jsonResponse = CommonJSONResponseTestData.getCommonjsonAPIResp_EmptyclaimName_EmptyAccountName();
        User u = [Select Id from User where Id = :UserInfo.getUserId()];
        System.assert(u != null, 'user not found.');

        Test.startTest();
        System.runAs(u) {
            List<Submission__c> submisstionList = [Select Id, name, case__c from Submission__c limit 1];
            Cognisureapi__mdt apimdt = Cognisureapi__mdt.getInstance('api_details');
            System.assert(apimdt != null, 'Cognisure metadata is not available');
            System.assert((String) apimdt.get('Field_Default_Definition__c') != null, 'Cognisure Static Resource Default  definition is not available');
            System.assert(submisstionList.size() > 0, 'Submission Record Does not Exist');
            String SubmisisonId = submisstionList[0].Id;
            System.assert(submisstionList[0].case__c != null, 'Submission case Does not Exist');

            List<StaticResource> sr = [Select id, name, body from StaticResource where Name = 'submissionrespunformatted'];
            System.assert(sr.size() > 0, 'Static Resource is not available');
            String submissionResponseJson = EncodingUtil.base64Decode(EncodingUtil.base64Encode(sr[0].body)).toString();
            System.assert(!String.isBlank(submissionResponseJson), 'JSON Response is blank');

            List<StaticResource> srList = [Select Id, name, body from StaticResource where Name = 'cognisure_sffield_defaults'];
            System.assert(srList.size() > 0, 'Static Resource is not available');
            String submissionResponseJson2 = EncodingUtil.base64Decode(EncodingUtil.base64Encode(srList[0].body)).toString();
            System.assert(!String.isBlank(submissionResponseJson2), 'JSON Response is blank');

            try {
                ProcessSubmissionResponse.processJSONResponse(jsonResponse, SubmisisonId);
            } catch (Exception Ex) {
                System.debug(LoggingLevel.ERROR, ex.getMessage() + ex.getCause());
                System.assert(false, 'Error:' + Ex.getCause() + Ex.getMessage());
            }

        }
        Test.stopTest();


        List<Account> AcctList = [Select Id, name, RecordTypeId from Account where createdDate = Today];
        System.assert(AcctList.size() == 1, 'Account Not created');
        System.Debug(LoggingLevel.DEBUG, 'Accounts:' + JSON.serialize(AcctList));
        System.assert(AcctList[0].Name == 'Cognisure Test Account', 'Account Default Name is Not Correct ' + AcctList[0].Name);


        List<Claim> Claims = [Select Id, Name, AccountId, IsDrivable, Status from Claim where createdDate = Today];
        System.assert(Claims.size() == 1, 'Claims Not created');
        System.Debug(LoggingLevel.DEBUG, 'Claims:' + JSON.serialize(Claims));
        System.assert(Claims[0].Name == 'Cognisure Default', 'Claim Default Name is Not Correct ' + Claims[0].Name);

        List<CustomerProperty> CustomerProperties = [
                Select Id, PrimaryOwnerId, FloorType, FoundationType, GarageType,
                        LotArea, CeilingType, DwellingType, PurchasePrice, RoofType, BedroomCount, BuiltUpArea, EngineDisplacementVolume, FairMarketValue, FloorCount, IsBasementIncluded,
                        IsChimneyIncluded, IsPassedSmogCheck, IsSwimmingPoolIncluded, PurchaseDate, YearBuilt
                from CustomerProperty
                where createdDate = Today
        ];
        System.assert(CustomerProperties.size() == 1, 'CustomerProperties Not created');
        System.Debug(LoggingLevel.DEBUG, 'CustomerProperties:' + JSON.serialize(CustomerProperties));


        List<CoverageType> CoverageTypes = [
                Select Id, Category, CategoryGroup, CategoryGroupType, CategoryGroupTypeValue, DeductibleAmount, EffectiveDate, ExpirationDate, LimitAmount, LimitRange, Name, SourceSystemIdentifier
                from CoverageType
                where createdDate = Today
        ];
        System.assert(CoverageTypes.size() > 0, 'CoverageTypes Not created');
        System.Debug(LoggingLevel.DEBUG, 'CoverageTypes:' + JSON.serialize(CoverageTypes));

        List<InsurancePolicy> InsurancePolicies = [
                Select Id, Name
                from InsurancePolicy
                where createdDate = Today
        ];
        //System.assert(InsurancePolicies.size()>0, 'InsurancePolicies Not created');
        System.Debug(LoggingLevel.DEBUG, 'InsurancePolicies:' + JSON.serialize(InsurancePolicies));


    }

    private static testMethod void testGlobalMethod_invokeLoadFromStaticResource() {

        User u = [Select Id from User where Id = :UserInfo.getUserId()];
        System.assert(u != null, 'user not found.');

        Test.startTest();
        System.runAs(u) {
            //createNonSetupTestData();
            List<Submission__c> submisstionList = [Select Id, name, case__c from Submission__c limit 1];
            System.assert(submisstionList.size() > 0, 'Submission Record Does not Exist');
            String SubmisisonId = submisstionList[0].Id;
            System.assert(submisstionList[0].case__c != null, 'Submission case Does not Exist');


            List<StaticResource> sr = [Select id, name, body from StaticResource where Name = 'submissionrespunformatted'];
            System.assert(sr.size() > 0, 'Static Resource is not available');
            String submissionResponseJson = EncodingUtil.base64Decode(EncodingUtil.base64Encode(sr[0].body)).toString();
            System.assert(!String.isBlank(submissionResponseJson), 'JSON Response is blank');
            try {
                invokeLoadFromStaticResource(SubmisisonId);
            } catch (Exception Ex) {
                System.debug(LoggingLevel.ERROR, ex.getMessage() + ex.getCause());

            }
            List<Account> AcctList = [Select Id, name, RecordTypeId from Account where createdDate = Today];
            System.assert(AcctList.size() > 0, 'Account Not created');
            System.Debug(LoggingLevel.DEBUG, 'Accounts:' + JSON.serialize(AcctList));


            List<Claim> Claims = [Select Id, AccountId, IsDrivable, Status from Claim where createdDate = Today];
            System.assert(Claims.size() > 0, 'Claims Not created');
            System.Debug(LoggingLevel.DEBUG, 'Claims:' + JSON.serialize(Claims));

            List<CustomerProperty> CustomerProperties = [
                    Select Id, PrimaryOwnerId, FloorType, FoundationType, GarageType,
                            LotArea, CeilingType, DwellingType, PurchasePrice, RoofType, BedroomCount, BuiltUpArea, EngineDisplacementVolume, FairMarketValue, FloorCount, IsBasementIncluded,
                            IsChimneyIncluded, IsPassedSmogCheck, IsSwimmingPoolIncluded, PurchaseDate, YearBuilt
                    from CustomerProperty
                    where createdDate = Today
            ];
            System.assert(CustomerProperties.size() > 0, 'CustomerProperties Not created');
            System.Debug(LoggingLevel.DEBUG, 'CustomerProperties:' + JSON.serialize(CustomerProperties));


            List<CoverageType> CoverageTypes = [
                    Select Id, Category, CategoryGroup, CategoryGroupType, CategoryGroupTypeValue, DeductibleAmount, EffectiveDate, ExpirationDate, LimitAmount, LimitRange, Name, SourceSystemIdentifier
                    from CoverageType
                    where createdDate = Today
            ];
            System.assert(CoverageTypes.size() > 0, 'CoverageTypes Not created');
            System.Debug(LoggingLevel.DEBUG, 'CoverageTypes:' + JSON.serialize(CoverageTypes));

            List<InsurancePolicy> InsurancePolicies = [Select Id, Name from InsurancePolicy where createdDate = Today];
            System.Debug(LoggingLevel.DEBUG, 'InsurancePolicies:' + JSON.serialize(InsurancePolicies));

        }


        Test.stopTest();
    }

    public static void invokeLoadFromStaticResource(String SubmissionId) {


        StaticResource SR = [Select id, name, body from StaticResource where Name = 'submissionrespunformatted'];//cognisureapimetadata.get
        String submissionResponseJson = EncodingUtil.base64Decode(EncodingUtil.base64Encode(sr.body)).toString();
        //Delete [Select Id,name from Account where createdDate =Today];
        //Delete [Select Id,name,ActualAmount,AssessmentDate,LossDate,Status from Claim ];
        //Delete [Select Id,name,Address,format(createdDate), AnnualMileage, BuiltUpArea, CeilingType, City, ConstructionClass, Country  from CustomerProperty  ];
        // Delete [Select Id,name from WorkerCompCoverageClass  ];
        //Delete [Select Id,name from CoverageType  ];
        //Delete [Select Id,name from Account where createdDate =Today];
        //Delete [Select Id,name,ActualAmount,AssessmentDate,LossDate,Status from Claim ];
        Id submissionId0;
        submissionId0 = SubmissionId;
        if (string.isBlank(submissionId0)) {
            submissionId0 = CognisureAPI_Util.getSubmissionId();

        }
        List<Account> accountList = [Select Id, name from Account where createdDate = Today];
        System.assert(accountList.size() == 0, 'Account should not exist yet.');
        System.assert(String.isNotBlank(submissionResponseJson), 'Blank Json Response');
        System.debug(LoggingLevel.Debug, '==========' + submissionResponseJson);
        if (string.isBlank(submissionId0)) {
            System.assert(false, 'Submission Id is empty');
        }

        ProcessSubmissionResponse.processJSONResponse(submissionResponseJson, submissionId0);
    }


    private static testMethod void test_Misc() {

        User u = [Select Id from User where Id = :UserInfo.getUserId()];
        System.assert(u != null, 'user not found.');

        Test.startTest();
        System.runAs(u) {
            CognisureAPIRequestsTest.getCommonJSONAPIResponse();
            CognisureAPIRequestsTest.getCommonjsonAPIResp2();
            CognisureAPI.schedulebatchjobs();
        }
        Test.stopTest();


    }

    @TestSetup
    private static void createTestData() {
        List<PermissionSet> p = [Select id, name from PermissionSet where name = 'Cognisuire_AI'];
        System.assert(p.size() > 0, 'No permission set Cognisuire_AI');
        List<PermissionSetAssignment> permissionSetAssignment = [Select Id from PermissionSetAssignment where PermissionSetId = :p[0].Id and AssigneeId = :UserInfo.getUserId()];
        if (permissionSetAssignment.size() == 0) {
            PermissionSetAssignment pa = new PermissionSetAssignment(AssigneeId = UserInfo.getUserId(), PermissionSetId = p[0].Id);

            Insert pa;
        }
        createNonSetupTestData();
    }


    private static void createNonSetupTestData() {
        List<Sobject> cases = getCases();
        Insert cases;
        Case case0 = (case) cases[0];
        createEmailMessage(case0.Id);
        List<Sobject> submisisonList = getSubmissionList();
        submisisonList[0].put('case__c', case0.Id);
        insert submisisonList;
        CognisureAPIRequestsTest.runTestDataTest();
        //MappingDefinitionCtrl.getStaticResourceData();
    }


    private static void createEmailMessage(String caseId) {
        EmailMessage emailMessage = new EmailMessage();
        emailMessage.status = '3'; // email was sent
        emailMessage.ParentId = caseId;
        emailMessage.fromAddress = 'billing@acme.com'; // from address
        emailMessage.fromName = 'Billing Department'; // from name
        emailMessage.toAddress = 'johnSmith@example.com';
        emailMessage.Subject = 'Hello';

        emailMessage.HtmlBody = 'Hello World';
        insert emailMessage;

        Attachment obj = new Attachment();
        obj.Body = Blob.valueOf('Test Blob');
        obj.ParentId = emailMessage.Id;
        obj.Name = 'Dummy.pdf';
        obj.ContentType = 'application/pdf';
        insert obj;

        System.debug([SELECT Id, HasAttachment FROM EmailMessage WHERE Id = :emailMessage.Id]);
    }

    private static List<Sobject> getCases() {
        String caseJSON = '[\n' +
                '  {\n' +
                '    "AccountId": null,\n' +
                '    "CaseNumber": "00001044",\n' +
                '    "Description": "Attaching both the documents Thank you, myname.",\n' +
                //'    "Id": "500Hp00001fQeMTIA0",\n' +
                '    "Origin": "Email",\n' +
                '    "Priority": "Medium",\n' +
                '    "Processed_By_Cognisure__c": false,\n' +
                '    "Status": "New",\n' +
                '    "Subject": "Documents from ABC TOP CO",\n' +
                '    "SuppliedEmail": "myemail@cognisure.ai",\n' +
                '    "SuppliedName": "myname",\n' +
                '    "Type": null\n' +
                '  }\n' +
                ']';

        List<Sobject> caseList = (List<case>) JSON.deserialize(caseJSON, List<case>.class);
        return caseList;

    }

    private static String getMessageIdfromCSResponse() {
        String fileUploadResp = CognisureAPIRequestsTest.getFileUploadAPIResponse();
        Map<String, Object> m = (Map<String, Object>) JSON.deserializeUntyped(fileUploadResp);
        String response_Id = (String) m.get('id');
        return response_Id;

    }


    private static List<Sobject> getSubmissionList() {
        String SubmssionJSON = '[\n' +
                '  {\n' +
                '    "Case__c": null,\n' +
                '    "Common_JSON_Status__c": false,\n' +
                '    "Custom_JSON_Status__c": false,\n' +
                '    "Message_Id__c": "",\n' +
                '    "Submission_360_Status__c": false,\n' +
                '    "Submission_Id__c": null\n' +
                '  }\n' +
                ']';
        List<Sobject> SubmissionJSONList = (List<Submission__c>) JSON.deserialize(SubmssionJSON, List<Submission__c>.class);
        return SubmissionJSONList;
    }

    private static testmethod void testCustomSettingMapping() {

        User u = [Select Id from User where Id = :UserInfo.getUserId()];
        System.assert(u != null, 'user not found.');

        Test.startTest();
        System.runAs(u) {
            Id submissionId = [Select id, name from Submission__c limit 1].Id;
            System.assert(submissionId != null, 'Submission Id is null');
            string jsonresp = CognisureAPIRequestsTest.getCommonjsonAPIResp2();
            //ProcessSubmissionResponse_mdt.processJSONResponse('',submissionId);
            ProcessSubmissionResponse.processJSONResponse(jsonresp, submissionId);
            Account a = [Select id, name from account where CreatedDate = Today limit 1];
            System.assert(a != null, 'Account not created');
            List<Claim> claimsList = [Select id, name from Claim where createdDate = Today];
            System.assert(claimsList.size() > 0, 'Claims not created..');
        }
        Test.stopTest();

    }

    private static testMethod void testSobjectFieldDefaults() {
        Cognisureapi__mdt cognisureapimetadata = Cognisureapi__mdt.getInstance('api_details');
        StaticResource fsc_sobject_field_defaults;
        List<String> sobjectList = new List<String>{
                'Account', 'Claim'
        };
        if (fsc_sobject_field_defaults == null) {
            List<StaticResource> srList = [Select Id, name, body from StaticResource where Name = :(String) cognisureapimetadata.get('Field_Default_Definition__c')];
            if (srList.size() == 0) {
                System.assert(false, 'Field Default Definition Static Resource is not found. ');
            }
            if (srList.size() > 0) {
                fsc_sobject_field_defaults = srList[0];
            }
        }
        Schema.DescribeSObjectResult[] descResult = Schema.describeSObjects(
                new List<String>(sobjectList));
        Map<String, Schema.DescribeSObjectResult> descResMap = new Map<String, Schema.DescribeSObjectResult>();
        for (Schema.DescribeSObjectResult descResult_iter : descResult) {
            descResMap.put(descResult_iter.getName(), descResult_iter);
        }
        StaticResource Sr = fsc_sobject_field_defaults;
        String DefaultfieldMapStr = EncodingUtil.base64Decode(EncodingUtil.base64Encode(sr.body)).toString();


        for (String Sobjectname : sobjectList) {
            Schema.DescribeSObjectResult descSobjRes = descResMap.get(Sobjectname);
            Map<String, Object> DefaultfieldMapByObject = (Map<String, Object>) JSON.deserializeUntyped(DefaultfieldMapStr);
            Map<String, Object> DefaultsMap_Sobject = (Map<String, Object>) DefaultfieldMapByObject.get(Sobjectname);
            if (Sobjectname == 'Account') {
                if (DefaultfieldMapByObject.containsKey('Account')) {
                    Object accountMapObj = DefaultfieldMapByObject.get('Account');

                    Map<String, Object> accountFieldDefaultMap = (Map<String, Object>) accountMapObj;
                    if (!accountFieldDefaultMap.containsKey('Name')) {
                        System.assert(false, 'Account Name Default Does Not Exist. ');
                    } else {
                        String accountName = (String) accountFieldDefaultMap.get('Name');
                        if (String.isBlank(accountName))
                            System.assert(false, 'Account Name Default Does Not Exist. ');

                    }
                } else {
                    System.assert(false, 'Account  Default Map Does Not Exist. ');

                }
            }
            if (Sobjectname == 'Claim') {
                if (DefaultfieldMapByObject.containsKey('Claim')) {
                    Object claimMapObj = DefaultfieldMapByObject.get('Claim');

                    Map<String, Object> accountFieldDefaultMap = (Map<String, Object>) claimMapObj;
                    if (!accountFieldDefaultMap.containsKey('Name')) {
                        System.assert(false, 'Account Name Default Does Not Exist. ');
                    } else {
                        String accountName = (String) accountFieldDefaultMap.get('Name');
                        if (String.isBlank(accountName))
                            System.assert(false, 'Account Name Default Does Not Exist. ');

                    }
                } else {
                    System.debug(LoggingLevel.DEBUG, JSON.serialize(DefaultsMap_Sobject));
                    System.assert(false, 'Claim  Default Map Does Not Exist. ');

                }
            }
        }


    }

    private static testMethod void testInsertClaimRecords() {
        String claimJson = '[{"attributes":{"type":"Claim"},"Name":"Test0", "IsDrivable":"false", "Status":"Initial", "AccountId":"", "CaseId":""}]';
        List<Claim> cliams = (List<Claim>) JSON.deserialize(claimJson, List<Claim>.class);
        Insert cliams;
    }

    private static testMethod void testNameSpaceAPI() {

        User u = [Select Id from User where Id = :UserInfo.getUserId()];
        System.assert(u != null, 'user not found.');

        Test.startTest();
        System.runAs(u) {
            System.Assert.isTrue(CognisureAPI_Util.getNameSpacePrefix() != null, 'namespace prefix from method is null');
            Sobject SubsmsisonSobjRecord = [Select Id, case__c from Submission__c limit 1];

            String NAMESPACEPREFIX = CognisureAPI_Util.getNameSpacePrefix();
            System.debug(LoggingLevel.DEBUG, 'NS' + NAMESPACEPREFIX);
            String caseFieldAPI = NAMESPACEPREFIX + 'Case__c';
            System.debug(LoggingLevel.DEBUG, caseFieldAPI);
            Submission__c s = [select Id, Case__c from Submission__c limit 1];
            Schema.DescribeSObjectResult[] descResult = Schema.describeSObjects(new List<String>{
                    'Submission__c'
            });
            Schema.DescribeSObjectResult descResult0 = descResult[0];
            System.debug(LoggingLevel.Debug, descResult0.fields.getMap().get(caseFieldAPI));
            System.debug(LoggingLevel.DEBUG, JSON.serialize(descResult0));
            Schema.SobjectField fieldToken_case = descResult0.fields.getMap().get(caseFieldAPI);
            System.debug((String) s.get(fieldToken_case));
            System.Assert.isTrue(fieldToken_case != null, 'Field Token is null.');
            Schema.DescribeSObjectResult dsr = Cognisureapi__mdt.sObjectType.getDescribe();
            String namespacePrefix0 = dsr.getName().remove(dsr.getLocalName());
            System.debug(namespacePrefix0);
            System.Assert.istrue(namespacePrefix0.equals(NAMESPACEPREFIX));

            System.Assert.isTrue((String) (SubsmsisonSobjRecord.get(caseFieldAPI)) != null, 'Case Id is Blank)');
        }
        Test.stopTest();


    }

    private static testMethod void test_CaseField_AccessibleOnSubmission() {

        User u = [Select Id from User where Id = :UserInfo.getUserId()];
        System.assert(u != null, 'user not found.');

        Test.startTest();
        System.runAs(u) {
            Schema.DescribeSObjectResult[] descResult_submission = Schema.describeSObjects(new List<String>{
                    'Submission__c'
            });
            Schema.DescribeSObjectResult descRes = descResult_submission[0].getSObjectType().getDescribe();
            String namespacePrefix0 = descRes.getName().remove(descRes.getLocalName());

            if (descResult_submission[0].isAccessible() && descResult_submission[0].isQueryable()) {
                String caseFieldAPI = namespacePrefix0 + 'Case__c';
                System.debug(LoggingLevel.DEBUG, caseFieldAPI);

                Schema.SobjectField fieldToken_case = descRes.fields.getMap().get(caseFieldAPI);
                System.assert(fieldToken_case != null, 'case field token is null');

                Schema.DescribeFieldResult dfr_case = fieldToken_case.getDescribe();
                System.assert(dfr_case != null, 'case describe result  is null');
                if (dfr_case.isAccessible()) {
                    Sobject SubsmsisonSobjRecord = [Select Id, case__c from Submission__c limit 1];
                    Id caseId = SubsmsisonSobjRecord.get(caseFieldAPI) != null ? String.valueOf(SubsmsisonSobjRecord.get(caseFieldAPI)) : '';
                } else {
                    System.assert(false, 'Case field on Submission Object is Not Accessible. Check permissions');
                }

            } else {
                System.assert(false, 'Submission record is not accessible. Check permissions on Submission Object.');
            }
        }
        Test.stopTest();

    }
    /*public static void processResponseElements(String jsonResponseElement){
        String jsonResponseElement2 = '{"Insured_Nm": "Carver & Carver Plumbing Inc.","Policy_Effectivedate": "09/12/2019","Policy_Expirydate": "09/12/2020","Policy_Nbr": "40466","Amount":1000,"Amount2":1000.0}';
        JSONParser parser = JSON.createParser(jsonResponseElement2);
        while (parser.nextToken() != null) {
            if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                System.debug(LoggingLevel.DEBUG,parser.getText());
                parser.nextToken();
                System.debug(LoggingLevel.DEBUG,parser.getText());

            }

        }
        // if(version != null && String.isNotEmpty(label)) {
        //     apiVersionToReleaseNameMap.put(version, label);
        //     version = null;
        //     label = null;
        // }

    }*/

}